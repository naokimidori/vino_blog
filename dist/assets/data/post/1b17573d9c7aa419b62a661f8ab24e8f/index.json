{"hash":"90b31ef1cd7e4287a36b0c1271c00034987c26fd","data":{"post":{"title":"JavaScript基础整理2","path":"/post/1b17573d9c7aa419b62a661f8ab24e8f/","date":"2019/12/03","timeToRead":1,"tags":[{"id":"JavaScript","title":"JavaScript","path":"/tag/JavaScript/"}],"content":"<h3 id=\"javascript-中的相等性\"><a href=\"#javascript-%E4%B8%AD%E7%9A%84%E7%9B%B8%E7%AD%89%E6%80%A7\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JavaScript 中的相等性</h3>\n<p>JavaScript 中有严格比较和类型转换比较：</p>\n<ul>\n<li>严格比较（例如 ===）在不允许强制转型的情况下检查两个值是否相等；</li>\n<li>抽象比较（例如 ==）在允许强制转型的情况下检查两个值是否相等。</li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"24\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span>\na <span class=\"token operator\">==</span> b<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// true</span>\na <span class=\"token operator\">===</span> b<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// false</span></code></pre>\n<h3 id=\"回调函数\"><a href=\"#%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>回调函数</h3>\n<p>回调函数是可以作为<strong>参数传递给另一个函数的函数</strong>，并在某些操作完成后执行。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">modifyArray</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 对 arr 做一些操作</span>\n  arr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 执行传进来的 callback 函数</span>\n  <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">modifyArray</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"array has been modified\"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"use-strict的作用是什么？\"><a href=\"#use-strict%E7%9A%84%E4%BD%9C%E7%94%A8%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>\"use strict\"的作用是什么？</h3>\n<p>严格模式<code class=\"language-text\">use strict</code>是ES5引入的，更好的将错误检测引入代码的方法。顾名思义，使得JS在更严格的条件下运行。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span> \n  x <span class=\"token operator\">=</span> val <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 错误地创建了全局变量</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Uncaught ReferenceError: x is not defined</span></code></pre>\n<h3 id=\"null-和-undefined\"><a href=\"#null-%E5%92%8C-undefined\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>null 和 undefined</h3>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 数据类型不同</span>\n<span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span>  \t\t<span class=\"token comment\">// object</span>\n<span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span>\n\n<span class=\"token comment\">// 相等性</span>\n<span class=\"token keyword null nil\">null</span> <span class=\"token operator\">==</span> <span class=\"token keyword nil\">undefined</span>  <span class=\"token comment\">// true</span>\n<span class=\"token keyword null nil\">null</span> <span class=\"token operator\">===</span> <span class=\"token keyword nil\">undefined</span> <span class=\"token comment\">// false</span>\n\n<span class=\"token comment\">// Number转换</span>\n<span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span> \t\t\t <span class=\"token comment\">// 0</span>\n<span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// NaN</span>\n\n<span class=\"token comment\">// Boolean转换</span>\n<span class=\"token known-class-name class-name\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span> \t\t <span class=\"token comment\">// false</span>\n<span class=\"token known-class-name class-name\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></code></pre>\n<ul>\n<li>\n<p>null表示\"没有对象\"，即该处不应该有值。典型用法是：</p>\n<ul>\n<li>作为函数的参数，表示该函数的参数不是对象。</li>\n<li>作为对象原型链的终点<strong>null</strong>。</li>\n</ul>\n</li>\n<li>\n<p>undefined表示\"缺少值\"，就是此处应该有一个值，但是还没有定义。典型用法是：</p>\n<ul>\n<li>变量被声明了，但没有赋值时，就等于undefined。</li>\n<li>调用函数时，应该提供的参数没有提供，该参数等于undefined。</li>\n<li>对象没有赋值的属性，该属性的值为undefined。</li>\n<li>函数没有返回值时，默认返回undefined。</li>\n</ul>\n</li>\n<li>null == undefined 为true？\t</li>\n</ul>\n<blockquote>\n<p>从Javascript规范中找到答案：</p>\n<p>规范中提到， <strong>要比较相等性之前，不能将 null 和 undefined 转换成其他任何值</strong>，并且规定null 和 undefined 是相等的。</p>\n</blockquote>\n<h3 id=\"javascript-中的数据类型\"><a href=\"#javascript-%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JavaScript 中的数据类型</h3>\n<p><strong>值类型(基本类型)</strong>：字符串（String）、数字(Number)、布尔(Boolean)、空（Null）、未定义（Undefined）、Symbol。</p>\n<p><strong>引用数据类型</strong>：对象(Object)、数组(Array)、函数(Function)。</p>\n<blockquote>\n<p>Symbol 是 ES6 引入了一种新的原始数据类型，表示独一无二的值。</p>\n</blockquote>\n<h3 id=\"事件冒泡和事件捕获\"><a href=\"#%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1%E5%92%8C%E4%BA%8B%E4%BB%B6%E6%8D%95%E8%8E%B7\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>事件冒泡和事件捕获</h3>\n<p>事件冒泡</p>\n<ul>\n<li>概念：从触发事件的那个节点一直到<code class=\"language-text\">document</code>，是自下而上的去触发事件。</li>\n<li>阻止冒泡： e.stopPropagation() 或 e.cancelBubble() --- IE</li>\n</ul>\n<p>事件捕获</p>\n<ul>\n<li>概念： 从<code class=\"language-text\">document</code>到触发事件的那个节点，即自上而下的去触发事件。</li>\n<li>dom.addEventListener('click', function(){}, true)  第三个参数为true的话代表事件捕获</li>\n</ul>\n<p>DOM事件流(event flow)</p>\n<pre class=\"language-text\"><code class=\"language-text\">1. 事件捕获</code></pre>\n<p> \t2. 处于目标事件\n3. 事件冒泡</p>\n"}},"context":{}}