{"hash":"b37518b001d68aa10baf36bc2360bd3a9bba5ac6","data":{"post":{"title":"JavaScript基础整理3","path":"/post/2d060208efca2bdfbc657252f8a37605/","date":"2019/12/24","timeToRead":2,"tags":[{"id":"JavaScript","title":"JavaScript","path":"/tag/JavaScript/"}],"content":"<h3 id=\"如何判断一个数字是否是整数\"><a href=\"#%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E6%95%B0%E5%AD%97%E6%98%AF%E5%90%A6%E6%98%AF%E6%95%B4%E6%95%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>如何判断一个数字是否是整数</h3>\n<p>思路： 对1进行取模，看看是否有余数</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">isInt</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> num <span class=\"token operator\">%</span> <span class=\"token number\">1</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">12.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre>\n<h3 id=\"比较两个对象\"><a href=\"#%E6%AF%94%E8%BE%83%E4%B8%A4%E4%B8%AA%E5%AF%B9%E8%B1%A1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>比较两个对象</h3>\n<p>方式一：</p>\n<p>​\t<strong>通过<code class=\"language-text\">JSON.stringify(obj)</code>来判断两个对象转后的字符串是否相等</strong></p>\n<ul>\n<li>优点：用法简单，对于<strong>顺序相同</strong>的两个对象可以快速进行比较得到结果</li>\n<li>缺点：当两个对比的对象中<strong>key的顺序不是完全相同</strong>时会比较出错</li>\n</ul>\n<p>方式二：</p>\n<p>​\t层级较少，可以自己写一个方法，通过遍历其中一个对象的keys，使用Obeject.hasOwnProperty可以进行判断</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/*\n * @param x {Object} 对象1\n * @param y {Object} 对象2\n * @return  {Boolean} true 为相等，false 为不等\n */</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">deepEqual</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 指向同一内存时</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">===</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> x <span class=\"token operator\">==</span> <span class=\"token string\">\"object\"</span> <span class=\"token operator\">&amp;&amp;</span> x <span class=\"token operator\">!=</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> y <span class=\"token operator\">==</span> <span class=\"token string\">\"object\"</span> <span class=\"token operator\">&amp;&amp;</span> y <span class=\"token operator\">!=</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">keys</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">!=</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">keys</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n \n    <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> prop <span class=\"token keyword\">in</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">hasOwnProperty</span><span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> <span class=\"token function\">deepEqual</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token keyword control-flow\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword control-flow\">else</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n \n    <span class=\"token keyword control-flow\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">else</span> \n    <span class=\"token keyword control-flow\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>方式三：</p>\n<p>​\t最好是依靠完善的测试库，涵盖了各种边界情况。Underscore和Lodash有一个名为_.isEqual()方法，用来比较好的处理深度对象的比较。</p>\n<h3 id=\"arrayfrom\"><a href=\"#arrayfrom\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Array.from()</h3>\n<p>Array.from()方法就是将一个类数组对象或者可遍历对象转换成一个真正的数组。</p>\n<p>要将一个类数组对象转换为一个真正的数组，必须具备以下条件：</p>\n<ul>\n<li>该类数组对象必须具有length属性，用于指定数组的长度。如果没有length属性，那么转换后的数组是一个空数组。</li>\n<li>该类数组对象的属性名必须为数值型或字符串型的数字</li>\n<li>该类数组对象的属性名可以加引号，也可以不加引号</li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> arrayLike1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token string\">'tom'</span><span class=\"token punctuation\">,</span> \n    <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token string\">'65'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">2</span><span class=\"token operator\">:</span> <span class=\"token string\">'男'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">3</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'jane'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'john'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Mary'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'length'</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> arr1 <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token keyword module\">from</span><span class=\"token punctuation\">(</span>arrayLike1<span class=\"token punctuation\">)</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span> <span class=\"token comment\">// ['tom','65','男',['jane','john','Mary']</span>\n\n<span class=\"token keyword\">let</span> arrayLike2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'name'</span><span class=\"token operator\">:</span> <span class=\"token string\">'tom'</span><span class=\"token punctuation\">,</span> \n    <span class=\"token string\">'age'</span><span class=\"token operator\">:</span> <span class=\"token string\">'65'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'sex'</span><span class=\"token operator\">:</span> <span class=\"token string\">'男'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'friends'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'jane'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'john'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Mary'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    length<span class=\"token operator\">:</span> <span class=\"token number\">4</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> arr2 <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token keyword module\">from</span><span class=\"token punctuation\">(</span>arrayLike2<span class=\"token punctuation\">)</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// [ undefined, undefined, undefined, undefined ]</span></code></pre>\n<p>将Set结构的数据转换为真正的数组：　</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token keyword module\">from</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// [ 1, 2, 3, 4 ]</span></code></pre>\n<h3 id=\"javascript执行机制\"><a href=\"#javascript%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JavaScript执行机制</h3>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 示例一</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'f'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'g'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'i'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'j'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// a b c h j i d e f g </span></code></pre>\n<ol>\n<li>打印 <code class=\"language-text\">a</code></li>\n<li><code class=\"language-text\">promise</code> 立即执行，打印 <code class=\"language-text\">b</code></li>\n<li><code class=\"language-text\">promise.then</code> 推入微任务队列</li>\n<li><code class=\"language-text\">setTimeout</code> 推入宏任务队列</li>\n<li>整段代码执行完毕，开始执行微任务，打印 <code class=\"language-text\">c</code> ，遇到 <code class=\"language-text\">setTimeout</code> 推入宏任务队列排队等待执行</li>\n<li>没有可执行的微任务开始执行宏任务，定时器按照延迟时间排队执行</li>\n<li>打印 <code class=\"language-text\">h j</code> ，<code class=\"language-text\">promise.then</code> 推入微任务队列</li>\n<li>有可执行的微任务，打印 <code class=\"language-text\">i</code> ，继续执行宏任务，打印 <code class=\"language-text\">d</code></li>\n<li>执行延迟为100的宏任务，打印 <code class=\"language-text\">e f</code>，执行微任务打印 <code class=\"language-text\">g</code>，所有任务执行完毕</li>\n</ol>\n<hr>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 示例二</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'start'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a_then'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a_function'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'res'</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b_then'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a方法的返回值'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b_function'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'返回值'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// start a_function b_function end （res 返回值） b_then a_then</span></code></pre>\n<h4 id=\"总结\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>总结</h4>\n<ul>\n<li><code class=\"language-text\">JavaScript</code> 单线程，任务需要排队执行</li>\n<li>同步任务进入主线程排队，异步任务进入事件队列排队等待被推入主线程执行</li>\n<li>定时器的延迟时间为 0 并不是立刻执行，只是代表相比于其他定时器更早的被执行</li>\n<li>以宏任务和微任务进一步理解Js执行机制</li>\n<li>整段代码作为宏任务开始执行，执行过程中宏任务和微任务进入相应的队列中</li>\n<li>整段代码执行结束，看微任务队列中是否有任务等待执行，如果有则执行所有的微任务，直到微任务队列中的任务执行完毕，如果没有则继续执行新的宏任务</li>\n<li>执行新的宏任务，凡是在执行宏任务过程中遇到微任务都将其推入微任务队列中执行</li>\n<li>反复如此直到所有任务全部执行完毕</li>\n</ul>\n"}},"context":{}}