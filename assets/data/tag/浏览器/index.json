{"hash":"b37518b001d68aa10baf36bc2360bd3a9bba5ac6","data":{"tag":{"title":"浏览器","belongsTo":{"edges":[{"node":{"title":"浏览器运行原理小记","path":"/post/94fb7083affdff1146febc00a83a31b0/","date":"2021/01/15","timeToRead":1,"content":"<h1 id=\"浏览器运作原理学习小记\"><a href=\"#%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%90%E4%BD%9C%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E5%B0%8F%E8%AE%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>浏览器运作原理学习小记</h1>\n<h2 id=\"浏览器概述\"><a href=\"#%E6%B5%8F%E8%A7%88%E5%99%A8%E6%A6%82%E8%BF%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>浏览器概述</h2>\n<h3 id=\"市场份额\"><a href=\"#%E5%B8%82%E5%9C%BA%E4%BB%BD%E9%A2%9D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>市场份额</h3>\n<p>数据来源：<a href=\"https://gs.statcounter.com/browser-market-share\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://gs.statcounter.com/browser-market-share</a> </p>\n<p>截止2021.03月</p>\n<p><img src=\"https://img.imgdb.cn/item/6059a8988322e6675c37c744.jpg\"></p>\n<h3 id=\"浏览器结构\"><a href=\"#%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BB%93%E6%9E%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>浏览器结构</h3>\n<ul>\n<li>\n<p>用户界面(User Interface)</p>\n<ul>\n<li>用于展示除标签页窗口之外的其他用户界面内容</li>\n<li>主要包括工具栏、地址栏、前进/后退按钮、书签等</li>\n</ul>\n</li>\n<li>\n<p>浏览器引擎(Browser Engine)</p>\n<ul>\n<li>用于在用户界面和浏览器引擎之前传递数据</li>\n</ul>\n</li>\n<li>\n<p><strong>渲染引擎(Rendering Engine)</strong></p>\n<ul>\n<li>负责渲染用户请求的页面内容</li>\n<li>包含HTML解释器、网络请求模块、JS解释器等</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://img.imgdb.cn/item/6059aa998322e6675c395912.png\"></p>\n<h3 id=\"内核\"><a href=\"#%E5%86%85%E6%A0%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>内核</h3>\n<blockquote>\n<p>概念：一般将渲染引擎称为浏览器的内核</p>\n</blockquote>\n<p><img src=\"https://img.imgdb.cn/item/6059b98c8322e6675c43dd54.png\"></p>\n<p>|        IE         | Trident |\n|      Firefox      |  Gecko  |\n|      Safari       | Webkit  |\n| Chrome/Opera/Edge |  Blink  |</p>\n<h3 id=\"进程与线程\"><a href=\"#%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>进程与线程</h3>\n<ul>\n<li>\n<p>进程：process</p>\n<ul>\n<li>操作系统进行资源分配和调度的基本单元，可以申请和拥有计算机资源</li>\n<li>进程是程序的基本执行实体，启动程序时系统会为该进程分配内存空间，关闭应用时回收</li>\n<li>进程之前的内存空间是独立的，需要通过进程间通信管道IPC(Inter Process Communication)来传递</li>\n<li>很多应用程序是多进程结构，可以避免某一进程卡死导致程序崩溃</li>\n</ul>\n</li>\n<li>\n<p>线程：thread</p>\n<ul>\n<li>操作系统能够进行运算调度的最小单位</li>\n<li><strong>一个线程中可以并发多个线程</strong></li>\n<li>每条线程<strong>并行</strong>执行不同任务</li>\n<li>同一进程之下的线程可以直接通信共享数据</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"浏览器是多进程的应用程序\"><a href=\"#%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A4%9A%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>浏览器是多进程的应用程序</h3>\n<blockquote>\n<p>以chrome为例</p>\n</blockquote>\n<p><img src=\"https://img.imgdb.cn/item/6059d0e68322e6675c50e63d.jpg\"></p>\n<ul>\n<li>\n<p>浏览器进程：</p>\n<ul>\n<li>负责各个页面的管理，创建和销毁其他进程</li>\n<li>控制浏览器除标签页以外的其他用户界面，包括地址栏、书签、前进后退等</li>\n<li>网络的资源管理、下载等。</li>\n</ul>\n</li>\n<li>\n<p>网络进程:</p>\n<ul>\n<li>负责发起和接收网络请求</li>\n</ul>\n</li>\n<li>\n<p>GPU进程:</p>\n<ul>\n<li>最多一个，用于3D绘制等</li>\n</ul>\n</li>\n<li>\n<p>插件进程</p>\n<ul>\n<li>负责控制网络所使用的所有插件</li>\n<li>仅当使用该插件时才创建，例如flash</li>\n<li>这里插件并不是指Chrome扩展</li>\n</ul>\n</li>\n<li>\n<p>渲染器进程</p>\n<ul>\n<li>用来控制显示tab标签内的所有内容</li>\n<li>浏览器在默认情况下<a href=\"https://www.chromium.org/developers/design-documents/process-models\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">有可能</a>会为每个标签页创建一个进程</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"请求到数据后浏览器的渲染过程\"><a href=\"#%E8%AF%B7%E6%B1%82%E5%88%B0%E6%95%B0%E6%8D%AE%E5%90%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E6%B8%B2%E6%9F%93%E8%BF%87%E7%A8%8B\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>请求到数据后浏览器的渲染过程</h2>\n<ol>\n<li>请求的数据准备完毕并且通过安全校验(SafeBrowsing)时，浏览器进程将数据通过IPC(Inter Process Communication)传递给渲染器进程的主线程</li>\n<li>DOM - 解析HTML，构造DOM树</li>\n</ol>\n<p><img src=\"https://img.imgdb.cn/item/605a04958322e6675c707938.jpg\"></p>\n<ol start=\"3\">\n<li>Style - 解析CSS，生成CSS规则树</li>\n</ol>\n<p><img src=\"https://img.imgdb.cn/item/605a04e28322e6675c70bd30.jpg\"></p>\n<ol start=\"4\">\n<li>Layout Tree - DOM树 + CSS规则树</li>\n</ol>\n<p><img src=\"https://img.imgdb.cn/item/605a056b8322e6675c712198.jpg\"></p>\n<ol start=\"5\">\n<li>绘制(Paint) - 主线程遍历Layout Tree创建一个绘制记录表(Paint Record)</li>\n</ol>\n<p><img src=\"https://img.imgdb.cn/item/605a06338322e6675c71ac87.jpg\"></p>\n<ol start=\"6\">\n<li>图层(Layer) - 主线程遍历Layout Tree生成layer tree，而后连同绘制信息表传给合成器线程</li>\n</ol>\n<p><img src=\"https://img.imgdb.cn/item/605a07138322e6675c72319f.jpg\"></p>\n<ol start=\"7\">\n<li>合成器线程：将每个图层栅格化并将其切分为<strong>许多图块(Tiles)</strong>，而后将每个图块发送给栅格化线程</li>\n</ol>\n<p><img src=\"https://img.imgdb.cn/item/605a09968322e6675c737562.jpg\"></p>\n<ol start=\"8\">\n<li>栅格线程(Raster Thread)：栅格化每个图块并将它们存储在GPU内存中， 返还给合成器线程“draw quads”的图块信息。draw quads记录了图块在内存中的位置和在页面中哪个位置绘制图块的信息。</li>\n</ol>\n<p><img src=\"https://img.imgdb.cn/item/605a09d38322e6675c73a5ac.jpg\"></p>\n<ol start=\"9\">\n<li>合成器帧(Compositor Frame)：合成器线程根据图块信息生成合成器帧，合成器帧通过IPC(Inter Process Communication)传送给浏览器进程</li>\n</ol>\n<p><img src=\"https://img.imgdb.cn/item/605a0aed8322e6675c74546b.jpg\"></p>\n<ol start=\"10\">\n<li>浏览器进程：将合成器帧传送到GPU渲染到屏幕上。</li>\n<li>当滚动页面，则会生成一个新的合成帧，传给GPU，再次渲染。</li>\n</ol>\n<h3 id=\"汇总：\"><a href=\"#%E6%B1%87%E6%80%BB%EF%BC%9A\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>汇总：</h3>\n<p><img src=\"https://img.imgdb.cn/item/605a0bea8322e6675c74da4c.jpg\"></p>\n<p>​\t\t<strong>浏览器进程中的网络线程请求获取到html数据后，通过IPC将数据传给渲染器进程的主线程。</strong></p>\n<p>​\t\t<strong>主线程将html解析构造DOM树，然后进行样式计算。根据DOM树和生成好的样式生成Layout Tree。</strong></p>\n<p>​\t\t<strong>主线程通过遍历Layout Tree生成绘制顺序表。</strong></p>\n<p>​\t\t <strong>主线程遍历Layout Tree生成layer tree，而后连同绘制信息表传给合成器线程。</strong></p>\n<p>​\t\t<strong>合成器线程按规则进行分图层，并把图层分为更小的图块(tiles)传给栅格线程进行栅格化。</strong></p>\n<p>​\t\t<strong>接着合成器线程会获得栅格线程传过来的\"draw quads\"图块信息。</strong></p>\n<p>​\t\t<strong>根据这些信息，合成器线程合成了一个合成器帧frame。</strong></p>\n<p>​\t\t<strong>通过IPC将该合成器帧传给浏览器进程。再传到GPU进行渲染</strong></p>\n<p>​\t\t<strong>最后显示在屏幕中...</strong></p>\n<h2 id=\"重排和重绘\"><a href=\"#%E9%87%8D%E6%8E%92%E5%92%8C%E9%87%8D%E7%BB%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>重排和重绘</h2>\n<h3 id=\"重排reflow\"><a href=\"#%E9%87%8D%E6%8E%92reflow\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>重排(Reflow)</h3>\n<p>​\t\t所谓重排，也称为回流，实际上是根据渲染树中每个渲染对象的信息，计算出各自渲染对象的几何信息（DOM对象的位置和尺寸大小），并将其安置在界面中的正确位置。</p>\n<p>​\t\t由于浏览器渲染界面是基于流式布局模型的，也就是某一个DOM节点信息更改了，就需要对DOM结构进行重新计算，重新布局界面，再次引发回流，只是这个结构更改程度会决定周边DOM更改范围，即全局范围和局部范围，全局范围就是从根节点html开始对整个渲染树进行重新布局，例如当我们改变了窗口尺寸或方向或者是修改了根元素的尺寸或者字体大小等；而局部布局可以是对渲染树的某部分或某一个渲染对象进行重新布局。</p>\n<p>在此，总结会引起重排的操作有：</p>\n<ol>\n<li>页面首次渲染。</li>\n<li>浏览器窗口大小发生改变。</li>\n<li>元素尺寸或位置发生改变。</li>\n<li>元素内容变化（文字数量或图片大小等等）。</li>\n<li>元素字体大小变化。</li>\n<li>添加或者删除可见的DOM元素。</li>\n<li>激活CSS伪类（例如：:hover）。</li>\n<li>设置style属性</li>\n<li>查询某些属性或调用某些方法。</li>\n</ol>\n<h3 id=\"重绘repainting\"><a href=\"#%E9%87%8D%E7%BB%98repainting\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>重绘(Repainting)</h3>\n<p>​\t\t所谓重绘，就是当页面中元素样式的改变并不影响它在文档流中的位置时，例如更改了字体颜色,浏览器会将新样式赋予给元素并重新绘制的过程。</p>\n<h3 id=\"性能优化\"><a href=\"#%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>性能优化</h3>\n<ul>\n<li>减少DOM操作</li>\n<li>\n<p>采用更优的API替代消费高的api，转换优化消费高的集合</p>\n<ul>\n<li>用querySelectorAll()替代getElementByXX()。</li>\n<li>开启动画的GPU加速，把渲染计算交给GPU。</li>\n<li>少用HTML集合（类数组）来遍历，因为集合遍历比真数组遍历耗费更高。</li>\n<li>用事件委托来减少事件处理器的数量。</li>\n</ul>\n</li>\n<li>\n<p>减少重排</p>\n<ul>\n<li>避免设置大量的style属性，因为通过设置style属性改变结点样式的话，每一次设置都会触发一次reflow，所以最好是使用class属性</li>\n<li>实现元素的动画，它的position属性，最好是设为absolute或fixed，这样不会影响其他元素的布局</li>\n</ul>\n</li>\n<li>\n<p>requestAnimationFrame()</p>\n<ul>\n<li>重排和重绘都会占用主线程，会与js抢占执行时间的问题，容易造成浏览器卡顿(&#x3C;60帧 16ms)</li>\n<li>当在一帧的时间内布局和绘制结束后还有剩余时间，js就会拿到主线程的使用权，若js执行时间过长，会导致在下一帧开始时JS没有及时归还主线程 ，导致下一帧动画没有及时渲染，就会出现动画卡顿。</li>\n</ul>\n<p><img src=\"https://img.imgdb.cn/item/605b55648322e6675c1d13f3.jpg\"></p>\n<ul>\n<li>requestAnimationFrame此方法会在每一帧被调用，将JS运行任务分到每一帧。在每一帧时间用完前暂停JS执行，归还主线程执行布局和绘制</li>\n<li>React Fiber</li>\n</ul>\n</li>\n<li>\n<p>transform</p>\n<ul>\n<li>transform属性不会进行布局和绘制，直接运行在合成器和栅格化线程中。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"参考：\"><a href=\"#%E5%8F%82%E8%80%83%EF%BC%9A\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>参考：</h2>\n<ul>\n<li><a href=\"https://www.bilibili.com/video/BV1x54y1B7RE\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.bilibili.com/video/BV1x54y1B7RE</a></li>\n<li><a href=\"https://juejin.cn/post/6938009725745233934\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://juejin.cn/post/6938009725745233934</a></li>\n<li><a href=\"https://www.chromium.org/developers/design-documents/process-models\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.chromium.org/developers/design-documents/process-models</a></li>\n<li><a href=\"https://www.html5rocks.com/en/tutorials/internals/howbrowserswork\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.html5rocks.com/en/tutorials/internals/howbrowserswork</a></li>\n</ul>\n"}}]}}},"context":{}}