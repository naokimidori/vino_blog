{"hash":"e5add9396d3bcf5efcaa7f4c3be154f0e606227d","data":{"tag":{"title":"JavaScript","belongsTo":{"edges":[{"node":{"title":"JavaScript基础整理3","path":"/post/2d060208efca2bdfbc657252f8a37605/","date":"2019/12/24","timeToRead":2,"content":"<h3 id=\"如何判断一个数字是否是整数\"><a href=\"#%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E6%95%B0%E5%AD%97%E6%98%AF%E5%90%A6%E6%98%AF%E6%95%B4%E6%95%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>如何判断一个数字是否是整数</h3>\n<p>思路： 对1进行取模，看看是否有余数</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">isInt</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> num <span class=\"token operator\">%</span> <span class=\"token number\">1</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">12.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre>\n<h3 id=\"比较两个对象\"><a href=\"#%E6%AF%94%E8%BE%83%E4%B8%A4%E4%B8%AA%E5%AF%B9%E8%B1%A1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>比较两个对象</h3>\n<p>方式一：</p>\n<p>​\t<strong>通过<code class=\"language-text\">JSON.stringify(obj)</code>来判断两个对象转后的字符串是否相等</strong></p>\n<ul>\n<li>优点：用法简单，对于<strong>顺序相同</strong>的两个对象可以快速进行比较得到结果</li>\n<li>缺点：当两个对比的对象中<strong>key的顺序不是完全相同</strong>时会比较出错</li>\n</ul>\n<p>方式二：</p>\n<p>​\t层级较少，可以自己写一个方法，通过遍历其中一个对象的keys，使用Obeject.hasOwnProperty可以进行判断</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/*\n * @param x {Object} 对象1\n * @param y {Object} 对象2\n * @return  {Boolean} true 为相等，false 为不等\n */</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">deepEqual</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 指向同一内存时</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">===</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> x <span class=\"token operator\">==</span> <span class=\"token string\">\"object\"</span> <span class=\"token operator\">&amp;&amp;</span> x <span class=\"token operator\">!=</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> y <span class=\"token operator\">==</span> <span class=\"token string\">\"object\"</span> <span class=\"token operator\">&amp;&amp;</span> y <span class=\"token operator\">!=</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">keys</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">!=</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">keys</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n \n    <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> prop <span class=\"token keyword\">in</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">hasOwnProperty</span><span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> <span class=\"token function\">deepEqual</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token keyword control-flow\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword control-flow\">else</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n \n    <span class=\"token keyword control-flow\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">else</span> \n    <span class=\"token keyword control-flow\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>方式三：</p>\n<p>​\t最好是依靠完善的测试库，涵盖了各种边界情况。Underscore和Lodash有一个名为_.isEqual()方法，用来比较好的处理深度对象的比较。</p>\n<h3 id=\"arrayfrom\"><a href=\"#arrayfrom\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Array.from()</h3>\n<p>Array.from()方法就是将一个类数组对象或者可遍历对象转换成一个真正的数组。</p>\n<p>要将一个类数组对象转换为一个真正的数组，必须具备以下条件：</p>\n<ul>\n<li>该类数组对象必须具有length属性，用于指定数组的长度。如果没有length属性，那么转换后的数组是一个空数组。</li>\n<li>该类数组对象的属性名必须为数值型或字符串型的数字</li>\n<li>该类数组对象的属性名可以加引号，也可以不加引号</li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> arrayLike1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token string\">'tom'</span><span class=\"token punctuation\">,</span> \n    <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token string\">'65'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">2</span><span class=\"token operator\">:</span> <span class=\"token string\">'男'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">3</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'jane'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'john'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Mary'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'length'</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> arr1 <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token keyword module\">from</span><span class=\"token punctuation\">(</span>arrayLike1<span class=\"token punctuation\">)</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span> <span class=\"token comment\">// ['tom','65','男',['jane','john','Mary']</span>\n\n<span class=\"token keyword\">let</span> arrayLike2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'name'</span><span class=\"token operator\">:</span> <span class=\"token string\">'tom'</span><span class=\"token punctuation\">,</span> \n    <span class=\"token string\">'age'</span><span class=\"token operator\">:</span> <span class=\"token string\">'65'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'sex'</span><span class=\"token operator\">:</span> <span class=\"token string\">'男'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'friends'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'jane'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'john'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Mary'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    length<span class=\"token operator\">:</span> <span class=\"token number\">4</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> arr2 <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token keyword module\">from</span><span class=\"token punctuation\">(</span>arrayLike2<span class=\"token punctuation\">)</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// [ undefined, undefined, undefined, undefined ]</span></code></pre>\n<p>将Set结构的数据转换为真正的数组：　</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token keyword module\">from</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// [ 1, 2, 3, 4 ]</span></code></pre>\n<h3 id=\"javascript执行机制\"><a href=\"#javascript%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JavaScript执行机制</h3>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 示例一</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'f'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'g'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'i'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'j'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// a b c h j i d e f g </span></code></pre>\n<ol>\n<li>打印 <code class=\"language-text\">a</code></li>\n<li><code class=\"language-text\">promise</code> 立即执行，打印 <code class=\"language-text\">b</code></li>\n<li><code class=\"language-text\">promise.then</code> 推入微任务队列</li>\n<li><code class=\"language-text\">setTimeout</code> 推入宏任务队列</li>\n<li>整段代码执行完毕，开始执行微任务，打印 <code class=\"language-text\">c</code> ，遇到 <code class=\"language-text\">setTimeout</code> 推入宏任务队列排队等待执行</li>\n<li>没有可执行的微任务开始执行宏任务，定时器按照延迟时间排队执行</li>\n<li>打印 <code class=\"language-text\">h j</code> ，<code class=\"language-text\">promise.then</code> 推入微任务队列</li>\n<li>有可执行的微任务，打印 <code class=\"language-text\">i</code> ，继续执行宏任务，打印 <code class=\"language-text\">d</code></li>\n<li>执行延迟为100的宏任务，打印 <code class=\"language-text\">e f</code>，执行微任务打印 <code class=\"language-text\">g</code>，所有任务执行完毕</li>\n</ol>\n<hr>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 示例二</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'start'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a_then'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a_function'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'res'</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b_then'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a方法的返回值'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b_function'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'返回值'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// start a_function b_function end （res 返回值） b_then a_then</span></code></pre>\n<h4 id=\"总结\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>总结</h4>\n<ul>\n<li><code class=\"language-text\">JavaScript</code> 单线程，任务需要排队执行</li>\n<li>同步任务进入主线程排队，异步任务进入事件队列排队等待被推入主线程执行</li>\n<li>定时器的延迟时间为 0 并不是立刻执行，只是代表相比于其他定时器更早的被执行</li>\n<li>以宏任务和微任务进一步理解Js执行机制</li>\n<li>整段代码作为宏任务开始执行，执行过程中宏任务和微任务进入相应的队列中</li>\n<li>整段代码执行结束，看微任务队列中是否有任务等待执行，如果有则执行所有的微任务，直到微任务队列中的任务执行完毕，如果没有则继续执行新的宏任务</li>\n<li>执行新的宏任务，凡是在执行宏任务过程中遇到微任务都将其推入微任务队列中执行</li>\n<li>反复如此直到所有任务全部执行完毕</li>\n</ul>\n"}},{"node":{"title":"JavaScript基础整理2","path":"/post/e82d4b6795fb713089fcb8e1b4025a24/","date":"2019/12/03","timeToRead":1,"content":"<h3 id=\"javascript-中的相等性\"><a href=\"#javascript-%E4%B8%AD%E7%9A%84%E7%9B%B8%E7%AD%89%E6%80%A7\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JavaScript 中的相等性</h3>\n<p>JavaScript 中有严格比较和类型转换比较：</p>\n<ul>\n<li>严格比较（例如 ===）在不允许强制转型的情况下检查两个值是否相等；</li>\n<li>抽象比较（例如 ==）在允许强制转型的情况下检查两个值是否相等。</li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"24\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span>\na <span class=\"token operator\">==</span> b<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// true</span>\na <span class=\"token operator\">===</span> b<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// false</span></code></pre>\n<h3 id=\"回调函数\"><a href=\"#%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>回调函数</h3>\n<p>回调函数是可以作为<strong>参数传递给另一个函数的函数</strong>，并在某些操作完成后执行。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">modifyArray</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 对 arr 做一些操作</span>\n  arr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 执行传进来的 callback 函数</span>\n  <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">modifyArray</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"array has been modified\"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"use-strict的作用是什么？\"><a href=\"#use-strict%E7%9A%84%E4%BD%9C%E7%94%A8%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>\"use strict\"的作用是什么？</h3>\n<p>严格模式<code class=\"language-text\">use strict</code>是ES5引入的，更好的将错误检测引入代码的方法。顾名思义，使得JS在更严格的条件下运行。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span> \n  x <span class=\"token operator\">=</span> val <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 错误地创建了全局变量</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Uncaught ReferenceError: x is not defined</span></code></pre>\n<h3 id=\"null-和-undefined\"><a href=\"#null-%E5%92%8C-undefined\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>null 和 undefined</h3>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 数据类型不同</span>\n<span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span>  \t\t<span class=\"token comment\">// object</span>\n<span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span>\n\n<span class=\"token comment\">// 相等性</span>\n<span class=\"token keyword null nil\">null</span> <span class=\"token operator\">==</span> <span class=\"token keyword nil\">undefined</span>  <span class=\"token comment\">// true</span>\n<span class=\"token keyword null nil\">null</span> <span class=\"token operator\">===</span> <span class=\"token keyword nil\">undefined</span> <span class=\"token comment\">// false</span>\n\n<span class=\"token comment\">// Number转换</span>\n<span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span> \t\t\t <span class=\"token comment\">// 0</span>\n<span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// NaN</span>\n\n<span class=\"token comment\">// Boolean转换</span>\n<span class=\"token known-class-name class-name\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span> \t\t <span class=\"token comment\">// false</span>\n<span class=\"token known-class-name class-name\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></code></pre>\n<ul>\n<li>\n<p>null表示\"没有对象\"，即该处不应该有值。典型用法是：</p>\n<ul>\n<li>作为函数的参数，表示该函数的参数不是对象。</li>\n<li>作为对象原型链的终点<strong>null</strong>。</li>\n</ul>\n</li>\n<li>\n<p>undefined表示\"缺少值\"，就是此处应该有一个值，但是还没有定义。典型用法是：</p>\n<ul>\n<li>变量被声明了，但没有赋值时，就等于undefined。</li>\n<li>调用函数时，应该提供的参数没有提供，该参数等于undefined。</li>\n<li>对象没有赋值的属性，该属性的值为undefined。</li>\n<li>函数没有返回值时，默认返回undefined。</li>\n</ul>\n</li>\n<li>null == undefined 为true？\t</li>\n</ul>\n<blockquote>\n<p>从Javascript规范中找到答案：</p>\n<p>规范中提到， <strong>要比较相等性之前，不能将 null 和 undefined 转换成其他任何值</strong>，并且规定null 和 undefined 是相等的。</p>\n</blockquote>\n<h3 id=\"javascript-中的数据类型\"><a href=\"#javascript-%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JavaScript 中的数据类型</h3>\n<p><strong>值类型(基本类型)</strong>：字符串（String）、数字(Number)、布尔(Boolean)、空（Null）、未定义（Undefined）、Symbol。</p>\n<p><strong>引用数据类型</strong>：对象(Object)、数组(Array)、函数(Function)。</p>\n<blockquote>\n<p>Symbol 是 ES6 引入了一种新的原始数据类型，表示独一无二的值。</p>\n</blockquote>\n<h3 id=\"事件冒泡和事件捕获\"><a href=\"#%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1%E5%92%8C%E4%BA%8B%E4%BB%B6%E6%8D%95%E8%8E%B7\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>事件冒泡和事件捕获</h3>\n<p>事件冒泡</p>\n<ul>\n<li>概念：从触发事件的那个节点一直到<code class=\"language-text\">document</code>，是自下而上的去触发事件。</li>\n<li>阻止冒泡： e.stopPropagation() 或 e.cancelBubble() --- IE</li>\n</ul>\n<p>事件捕获</p>\n<ul>\n<li>概念： 从<code class=\"language-text\">document</code>到触发事件的那个节点，即自上而下的去触发事件。</li>\n<li>dom.addEventListener('click', function(){}, true)  第三个参数为true的话代表事件捕获</li>\n</ul>\n<p>DOM事件流(event flow)</p>\n<pre class=\"language-text\"><code class=\"language-text\">1. 事件捕获</code></pre>\n<p> \t2. 处于目标事件\n3. 事件冒泡</p>\n"}},{"node":{"title":"JavaScript基础整理1","path":"/post/ea8e0682b66cfb77d3f66a5a333ce417/","date":"2019/11/20","timeToRead":2,"content":"<h3 id=\"类型转换\"><a href=\"#%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>类型转换</h3>\n<ul>\n<li>强制类型转换</li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'24'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span><span class=\"token operator\">-</span>强制转换</code></pre>\n<p>同理：</p>\n<blockquote>\n<p>Boolean(value)：把参数值转换为布尔型值\nNumber(value)：把参数值转换为数字\nparseFloat/parseInt：把参数值转换为浮点数/整数\nString(value)：把参数值转换为字符串\ntoString(value)：把参数值转换为字符串</p>\n</blockquote>\n<ul>\n<li>隐式(自动)转换</li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'24'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> a <span class=\"token operator\">*</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\na <span class=\"token operator\">--</span> <span class=\"token string\">'24'</span><span class=\"token punctuation\">;</span>\nb <span class=\"token operator\">--</span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span></code></pre>\n<p>自动转换表</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">值（value）</th>\n<th>字符串操作环境</th>\n<th>数字运算环境</th>\n<th>逻辑运算环境</th>\n<th>对象操作环境</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">undefined</td>\n<td>\"undefined\"</td>\n<td>NaN</td>\n<td>false</td>\n<td>Error</td>\n</tr>\n<tr>\n<td align=\"left\">null</td>\n<td>\"null\"</td>\n<td>0</td>\n<td>false</td>\n<td>Error</td>\n</tr>\n<tr>\n<td align=\"left\">非空字符串</td>\n<td>不转换</td>\n<td>字符串对应的数字值NaN</td>\n<td>true</td>\n<td>String</td>\n</tr>\n<tr>\n<td align=\"left\">空字符串</td>\n<td>不转换</td>\n<td>0</td>\n<td>false</td>\n<td>String</td>\n</tr>\n<tr>\n<td align=\"left\">0</td>\n<td>\"0\"</td>\n<td>不转换</td>\n<td>false</td>\n<td>Number</td>\n</tr>\n<tr>\n<td align=\"left\">NaN</td>\n<td>\"NaN\"</td>\n<td>不转换</td>\n<td>false</td>\n<td>Number</td>\n</tr>\n<tr>\n<td align=\"left\">Infinity</td>\n<td>\"Infinity\"</td>\n<td>不转换</td>\n<td>true</td>\n<td>Number</td>\n</tr>\n<tr>\n<td align=\"left\">Number.POSITIVE_INFINITY</td>\n<td>\"Infinity\"</td>\n<td>不转换</td>\n<td>true</td>\n<td>Number</td>\n</tr>\n<tr>\n<td align=\"left\">Number.NEGATIVE_INFINITY</td>\n<td>\"-Infinity\"</td>\n<td>不转换</td>\n<td>true</td>\n<td>Number</td>\n</tr>\n<tr>\n<td align=\"left\">-Infinity</td>\n<td>\"-Infinity\"</td>\n<td>不转换</td>\n<td>true</td>\n<td>Number</td>\n</tr>\n<tr>\n<td align=\"left\">Number.MAX_VALUE</td>\n<td>\"1.7976931348623157e+308\"</td>\n<td>不转换</td>\n<td>true</td>\n<td>Number</td>\n</tr>\n<tr>\n<td align=\"left\">Number.MIN_VALUE</td>\n<td>\"5e-324\"</td>\n<td>不转换</td>\n<td>true</td>\n<td>Number</td>\n</tr>\n<tr>\n<td align=\"left\">其他所有数字</td>\n<td>\"数字的字符串值\"</td>\n<td>不转换</td>\n<td>true</td>\n<td>Number</td>\n</tr>\n<tr>\n<td align=\"left\">true</td>\n<td>\"true\"</td>\n<td>1</td>\n<td>不转换</td>\n<td>Boolean</td>\n</tr>\n<tr>\n<td align=\"left\">false</td>\n<td>\"false\"</td>\n<td>0</td>\n<td>不转换</td>\n<td>Boolean</td>\n</tr>\n<tr>\n<td align=\"left\">对象</td>\n<td>toString()</td>\n<td>valueOf() 或 toString() 或 NaN</td>\n<td>true</td>\n<td>不转换</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"javascript的作用域scope及作用域链指什么？\"><a href=\"#javascript%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9Fscope%E5%8F%8A%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE%E6%8C%87%E4%BB%80%E4%B9%88%EF%BC%9F\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JavaScript的作用域(scope)及作用域链指什么？</h3>\n<p>简单来说，作用域就是变量与函数的可访问范围，即作用域控制着变量与函数的可见性和生命周期。</p>\n<p>js的作用域是靠函数来形成的，也就是说一个函数的变量在函数外不可以访问。</p>\n<ul>\n<li>\n<p>全局作用域</p>\n<ul>\n<li>函数外定义的变量拥有全局作用域</li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> n <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">return</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 24</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 8</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// ncaught ReferenceError: a is not defined</span></code></pre>\n<ul>\n<li>未定义直接赋值的变量自动提升为全局作用域</li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> n <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  a <span class=\"token operator\">=</span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">return</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 24</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 8</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 24 提升</span></code></pre>\n<ul>\n<li>window对象的属性拥有全局作用域</li>\n</ul>\n</li>\n<li>\n<p>局部作用域</p>\n<p>局部作用域一般只在固定的代码片段内可访问到，最常见的例如函数内部，所以在一些地方会把这种作用域成为函数作用域。</p>\n<p>局部作用域的特性，外部无法访问。如全局作用域第一个代码片段中的<code class=\"language-text\">console.log(a)</code>会提示报错。</p>\n</li>\n<li>\n<p>ES6的块级作用域</p>\n<ul>\n<li>ES5只有全局作用域和函数作用域，没有块级作用域，会带来下面问题：</li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 变量提升导致内层变量可能会覆盖外层变量</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// undefined</span></code></pre>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 用来计数的循环变量泄漏位全局变量</span>\n<span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token arrow operator\">=></span><span class=\"token punctuation\">{</span><span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 10 个 10</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10</span></code></pre>\n<ul>\n<li>ES6的块级作用域let/const</li>\n</ul>\n</li>\n<li>\n<p>作用域链</p>\n<p>通俗地讲，当声明一个函数时，局部作用域一级一级向上包起来，就是作用域链。</p>\n<ol>\n<li>当执行函数时，总是先从函数内部找寻局部变量</li>\n<li>如果内部找不到（函数的局部作用域没有），则会向创建函数的作用域（声明函数的作用域）寻找，依次向上</li>\n</ol>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">fn1</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">fn2</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">fn1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">fn2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span></code></pre>\n</li>\n</ul>\n<h3 id=\"闭包\"><a href=\"#%E9%97%AD%E5%8C%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>闭包</h3>\n<ul>\n<li>\n<p>概念</p>\n<ul>\n<li><strong>闭包函数：</strong>声明在一个函数中的函数，叫做闭包函数。</li>\n<li><strong>闭包：</strong>内部函数总是可以访问其所在的外部函数中声明的参数和变量，即使在其外部函数被返回（寿命终结）了之后。</li>\n<li>当函数可以记住并访问所在的词法作用域时，就产生了闭包 <strong>（你不知道的JavaScript）</strong></li>\n<li>闭包是指有权访问另一个函数作用域中的变量的函数  <strong>(JavaScript高级程序设计)</strong></li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 示例1</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">outerFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n  <span class=\"token keyword\">function</span> <span class=\"token function\">innerFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">return</span> innerFn<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> inner <span class=\"token operator\">=</span> <span class=\"token function\">outerFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//每次外部函数执行的时候，外部函数的地址不同，都会重新创建一个新的地址</span>\n<span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 1</span>\n<span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 2</span>\n<span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 3</span>\n<span class=\"token keyword\">var</span> inner2 <span class=\"token operator\">=</span> <span class=\"token function\">outerFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">inner2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n<span class=\"token function\">inner2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n<span class=\"token function\">inner2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span></code></pre>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 示例2</span>\n<span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">outerFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">innnerFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n       i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n       <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">return</span> innnerFn<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> inner1 <span class=\"token operator\">=</span> <span class=\"token function\">outerFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> inner2 <span class=\"token operator\">=</span> <span class=\"token function\">outerFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">inner1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 1s</span>\n<span class=\"token function\">inner2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 2</span>\n<span class=\"token function\">inner1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 3</span>\n<span class=\"token function\">inner2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 4</span></code></pre>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 示例3</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">m1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n          <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token function\">m1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//2</span>\n<span class=\"token function\">m1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//2</span>\n<span class=\"token function\">m1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//2</span>\n \n<span class=\"token keyword\">var</span> m2 <span class=\"token operator\">=</span> <span class=\"token function\">m1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">m2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//2</span>\n<span class=\"token function\">m2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//3</span>\n<span class=\"token function\">m2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//4</span></code></pre>\n<ul>\n<li>闭包的实际使用</li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 计时器</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello 闭包'</span><span class=\"token punctuation\">)</span></code></pre>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// jQuery</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">doSomeing</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">selector<span class=\"token punctuation\">,</span>doWhat</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">$</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>doWhat<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">doSomeing</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#dom1'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'dowhat'</span><span class=\"token punctuation\">)</span></code></pre>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 防抖</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">func<span class=\"token punctuation\">,</span> delay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> timer<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//计时器id</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//清除计时器</span>\n        timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token spread operator\">...</span>\n<span class=\"token spread operator\">...</span>\n<span class=\"token spread operator\">...</span></code></pre>\n<ul>\n<li>闭包实操题</li>\n</ul>\n<blockquote>\n<p>编写一个方法，实现：</p>\n<p>var addSix = createBase(6);</p>\n<p> addSix(10); // 返回 16 </p>\n<p>addSix(21); // 返回 27</p>\n</blockquote>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">createBase</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> num <span class=\"token operator\">+</span> n<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> addSix <span class=\"token operator\">=</span> <span class=\"token function\">createBase</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">addSix</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回 16 </span>\n<span class=\"token function\">addSix</span><span class=\"token punctuation\">(</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回 27</span></code></pre>\n"}},{"node":{"title":"高阶函数之map filter reduce","path":"/post/28c57178e04138d5d0a1707da53e09ea/","date":"2019/10/10","timeToRead":2,"content":"<h1 id=\"高阶函数\"><a href=\"#%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>高阶函数</h1>\n<blockquote>\n<p>高阶函数指的是一个函数以函数为参数，或以函数为返回值，或者既以函数为参数又以函数为返回值</p>\n</blockquote>\n<p>高阶函数经常用于：</p>\n<ul>\n<li>抽象或隔离行为、作用，异步控制流程作为回调函数，promises，monads等</li>\n<li>创建可以泛用于各种数据类型的功能</li>\n<li>部分应用于函数参数（偏函数应用）或创建一个柯里化的函数，用于复用或函数复合。</li>\n<li>接受一个函数列表并返回一些由这个列表中的函数组成的复合函数</li>\n</ul>\n<h3 id=\"js一些内置的高阶函数\"><a href=\"#js%E4%B8%80%E4%BA%9B%E5%86%85%E7%BD%AE%E7%9A%84%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>js一些内置的高阶函数</h3>\n<p><code class=\"language-text\">Array.prototype.map</code>\n<code class=\"language-text\">Array.prototype.filter</code>\n<code class=\"language-text\">Array.prototype.reduce</code></p>\n<h4 id=\"一张图讲清三者区别\"><a href=\"#%E4%B8%80%E5%BC%A0%E5%9B%BE%E8%AE%B2%E6%B8%85%E4%B8%89%E8%80%85%E5%8C%BA%E5%88%AB\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>一张图讲清三者区别</h4>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/18509339-c81a84969495d496.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"区别\"></p>\n<hr>\n<h2 id=\"map\"><a href=\"#map\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>map</h2>\n<blockquote>\n<p>map() 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。map 不会改变原数组。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> animals <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Fluffykins\"</span><span class=\"token punctuation\">,</span> species<span class=\"token operator\">:</span> <span class=\"token string\">\"rabbit\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Caro\"</span><span class=\"token punctuation\">,</span> species<span class=\"token operator\">:</span> <span class=\"token string\">\"dog\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Hamilton\"</span><span class=\"token punctuation\">,</span> species<span class=\"token operator\">:</span> <span class=\"token string\">\"dog\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Harold\"</span><span class=\"token punctuation\">,</span> species<span class=\"token operator\">:</span> <span class=\"token string\">\"fish\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Ursula\"</span><span class=\"token punctuation\">,</span> species<span class=\"token operator\">:</span> <span class=\"token string\">\"cat\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Jimmy\"</span><span class=\"token punctuation\">,</span> species<span class=\"token operator\">:</span> <span class=\"token string\">\"fish\"</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n</blockquote>\n<p>// 不使用高阶函数\nvar names = [];\nfor (let i = 0; i &#x3C; animals.length; i++) {\nnames.push(animals[i].name);\n}\nconsole.log(names); //[\"Fluffykins\", \"Caro\", \"Hamilton\", \"Harold\", \"Ursula\", \"Jimmy\"]</p>\n<p>// 使用高阶函数\nvar names = animals.map(x=>x.name);\nconsole.log(names); //[\"Fluffykins\", \"Caro\", \"Hamilton\", \"Harold\", \"Ursula\", \"Jimmy\"]</p>\n<pre class=\"language-text\"><code class=\"language-text\">---\n## filter\n&gt;filter() 方法会创建一个新数组，其中包含所有通过回调函数测试的元素。\nfilter 为数组中的每个元素调用一次 callback 函数， callback 函数返回 true 表示该元素通过测试，保留该元素，false 则不保留。filter 不会改变原数组，它返回过滤后的新数组。\n```javascript\nvar animals = [\n  { name: &quot;Fluffykins&quot;, species: &quot;rabbit&quot; },\n  { name: &quot;Caro&quot;, species: &quot;dog&quot; },\n  { name: &quot;Hamilton&quot;, species: &quot;dog&quot; },\n  { name: &quot;Harold&quot;, species: &quot;fish&quot; },\n  { name: &quot;Ursula&quot;, species: &quot;cat&quot; },\n  { name: &quot;Jimmy&quot;, species: &quot;fish&quot; }\n];\n\n// 不使用高阶函数\nvar dogs = [];\nfor (var i = 0; i &lt; animals.length; i++) {\n  if (animals[i].species === &quot;dog&quot;) dogs.push(animals[i]);\n}\nconsole.log(dogs); \n\n\n// 使用高阶函数\nvar dogs = animals.filter(x =&gt; x.species === &quot;dog&quot;);\nconsole.log(dogs); // {name: &quot;Caro&quot;, species: &quot;dog&quot;} // { name: &quot;Hamilton&quot;, species: &quot;dog&quot; }</code></pre>\n<hr>\n<h2 id=\"reduce\"><a href=\"#reduce\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>reduce</h2>\n<blockquote>\n<p>reduce 方法对调用数组的每个元素执行回调函数，最后生成一个单一的值并返回。 reduce 方法接受两个参数：1）reduce 函数（回调），2）一个可选的 initialValue。\nreduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。</p>\n</blockquote>\n<h4 id=\"语法\"><a href=\"#%E8%AF%AD%E6%B3%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>语法</h4>\n<p><code class=\"language-text\">arr.reduce(callback,initialValue)</code></p>\n<h4 id=\"reduce的一些应用场景\"><a href=\"#reduce%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>reduce的一些应用场景</h4>\n<p>1.求和求积</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> sum <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span>y</span><span class=\"token punctuation\">)</span><span class=\"token arrow operator\">=></span>x<span class=\"token operator\">+</span>y<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> mul <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span>y</span><span class=\"token punctuation\">)</span><span class=\"token arrow operator\">=></span>x<span class=\"token operator\">*</span>y<span class=\"token punctuation\">)</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> sum <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//求和，10</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> mul <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//求乘积，24</span></code></pre>\n<p>2.计算数组中每个元素出现的次数</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Tiff'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bruce'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Alice'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> nameNum <span class=\"token operator\">=</span> names<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pre<span class=\"token punctuation\">,</span>cur</span><span class=\"token punctuation\">)</span><span class=\"token arrow operator\">=></span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span>cur <span class=\"token keyword\">in</span> pre<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    pre<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span>\n  <span class=\"token punctuation\">}</span><span class=\"token keyword control-flow\">else</span><span class=\"token punctuation\">{</span>\n    pre<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> \n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">return</span> pre\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>nameNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//{Alice: 2, Bob: 1, Tiff: 1, Bruce: 1}</span></code></pre>\n<p>3.数组去重</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> newArr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pre<span class=\"token punctuation\">,</span>cur</span><span class=\"token punctuation\">)</span><span class=\"token arrow operator\">=></span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pre<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">includes</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">return</span> pre<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">concat</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword control-flow\">else</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">return</span> pre\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>newArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// [1, 2, 3, 4]</span></code></pre>\n<p>4.将二维数组转化为一维</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> newArr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pre<span class=\"token punctuation\">,</span>cur</span><span class=\"token punctuation\">)</span><span class=\"token arrow operator\">=></span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> pre<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">concat</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>newArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [0, 1, 2, 3, 4, 5]</span></code></pre>\n<p>5.将多维数组转化为一维</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">newArr</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n   <span class=\"token keyword control-flow\">return</span> arr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pre<span class=\"token punctuation\">,</span>cur</span><span class=\"token punctuation\">)</span><span class=\"token arrow operator\">=></span>pre<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">concat</span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">isArray</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token function\">newArr</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">newArr</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[0, 1, 2, 3, 4, 5, 6, 7]</span></code></pre>\n<p>6.对象里的属性求和</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        subject<span class=\"token operator\">:</span> <span class=\"token string\">'math'</span><span class=\"token punctuation\">,</span>\n        score<span class=\"token operator\">:</span> <span class=\"token number\">10</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        subject<span class=\"token operator\">:</span> <span class=\"token string\">'chinese'</span><span class=\"token punctuation\">,</span>\n        score<span class=\"token operator\">:</span> <span class=\"token number\">20</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        subject<span class=\"token operator\">:</span> <span class=\"token string\">'english'</span><span class=\"token punctuation\">,</span>\n        score<span class=\"token operator\">:</span> <span class=\"token number\">30</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> sum <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prev<span class=\"token punctuation\">,</span> cur</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> cur<span class=\"token punctuation\">.</span><span class=\"token property-access\">score</span> <span class=\"token operator\">+</span> prev<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span> <span class=\"token comment\">//60</span></code></pre>\n<p>7.将[1,3,1,4]转为数字1314</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">addDigitValue</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prev<span class=\"token punctuation\">,</span>curr<span class=\"token punctuation\">,</span>curIndex<span class=\"token punctuation\">,</span>array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> exponent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span>curIndex<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> digitValue <span class=\"token operator\">=</span> curr<span class=\"token operator\">*</span><span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>exponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> prev <span class=\"token operator\">+</span> digitValue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> arr6 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> result7 <span class=\"token operator\">=</span> arr6<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span>addDigitValue<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">'result7'</span><span class=\"token punctuation\">,</span>result7<span class=\"token punctuation\">)</span></code></pre>\n<h3 id=\"参考链接\"><a href=\"#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>参考链接</h3>\n<p><a href=\"https://juejin.im/post/5cb30e2ce51d456e63760450#heading-9\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://juejin.im/post/5cb30e2ce51d456e63760450#heading-9</a>\n<a href=\"https://www.cnblogs.com/chengxs/p/11088238.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.cnblogs.com/chengxs/p/11088238.html</a></p>\n"}},{"node":{"title":"JS中的防抖和节流","path":"/post/1cc2eedfd0ffb7376fc3b5bbc1e4712c/","date":"2019/08/12","timeToRead":1,"content":"<h2 id=\"前言\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>前言</h2>\n<p>在前端开发中，经常会遇到频繁触发某一事件的情况，如 scroll、mousemove、onchange 等。这种高频率的触发会造成卡顿等现象。\n解决这种问题通常有两种方法：<strong>防抖</strong> 和 <strong>节流</strong></p>\n<p><img src=\"https://s2.ax1x.com/2019/09/04/nZsn0I.gif\" alt=\"没有防抖和节流\"></p>\n<h2 id=\"防抖-debounce\"><a href=\"#%E9%98%B2%E6%8A%96-debounce\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>防抖 debounce</h2>\n<h3 id=\"防抖原理\"><a href=\"#%E9%98%B2%E6%8A%96%E5%8E%9F%E7%90%86\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>防抖原理</h3>\n<blockquote>\n<p>在事件被触发 n 秒后再执行回调，如果在这 n 秒内又被触发，则重新计时。</p>\n</blockquote>\n<p><img src=\"https://s2.ax1x.com/2019/09/04/nZJyX8.png\" alt=\"防抖\"></p>\n<p>示例代码如下:</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>inp<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre>\n<h3 id=\"简易版本\"><a href=\"#%E7%AE%80%E6%98%93%E7%89%88%E6%9C%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>简易版本:</h3>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">func<span class=\"token punctuation\">,</span> delay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> timer<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//计时器id</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//清除计时器</span>\n        timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 调用</span>\ninp<span class=\"token punctuation\">.</span><span class=\"token property-access\">oninput</span> <span class=\"token operator\">=</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></code></pre>\n<p>好了，一个基础的防抖函数就完成了。\n但这样写有两个问题没有解决：<strong>this 指向</strong> 和 <strong>event 对象</strong></p>\n<h3 id=\"this-指向问题？\"><a href=\"#this-%E6%8C%87%E5%90%91%E9%97%AE%E9%A2%98%EF%BC%9F\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>this 指向问题？</h3>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//如果输出this， 指向window</span>\ninp<span class=\"token punctuation\">.</span><span class=\"token property-access\">oninput</span> <span class=\"token operator\">=</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></code></pre>\n<h3 id=\"event-对象问题？\"><a href=\"#event-%E5%AF%B9%E8%B1%A1%E9%97%AE%E9%A2%98%EF%BC%9F\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>event 对象问题？</h3>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">func<span class=\"token punctuation\">,</span> delay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> timer<span class=\"token punctuation\">;</span> <span class=\"token comment\">//计时器id</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//清除计时器</span>\n        timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">bing</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 调用</span>\ninp<span class=\"token punctuation\">.</span><span class=\"token property-access\">oninput</span> <span class=\"token operator\">=</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span>bing<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//输出 undefined</span></code></pre>\n<h3 id=\"完善后的代码\"><a href=\"#%E5%AE%8C%E5%96%84%E5%90%8E%E7%9A%84%E4%BB%A3%E7%A0%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>完善后的代码</h3>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">func<span class=\"token punctuation\">,</span> delay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> timer<span class=\"token punctuation\">;</span> <span class=\"token comment\">//计时器id</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> _this <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//保留this</span>\n        <span class=\"token keyword\">let</span> _arg <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">;</span> <span class=\"token comment\">//保留event</span>\n\n        <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//清除计时器</span>\n        timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            func<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">apply</span><span class=\"token punctuation\">(</span>_this<span class=\"token punctuation\">,</span> _arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//改变指向</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">bing</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 调用</span>\ninp<span class=\"token punctuation\">.</span><span class=\"token property-access\">oninput</span> <span class=\"token operator\">=</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span>bing<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"实现效果如下图\"><a href=\"#%E5%AE%9E%E7%8E%B0%E6%95%88%E6%9E%9C%E5%A6%82%E4%B8%8B%E5%9B%BE\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>实现效果如下图:</h3>\n<p><img src=\"https://s2.ax1x.com/2019/09/04/nZsxC8.gif\" alt=\"防抖\"></p>\n<h2 id=\"节流-throttle\"><a href=\"#%E8%8A%82%E6%B5%81-throttle\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>节流 throttle</h2>\n<h3 id=\"节流原理\"><a href=\"#%E8%8A%82%E6%B5%81%E5%8E%9F%E7%90%86\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>节流原理</h3>\n<blockquote>\n<p>特定的时间内周期，事件只会执行一次，不管被触发了多少次。如一些抽奖系统等。</p>\n</blockquote>\n<p><img src=\"https://s2.ax1x.com/2019/09/04/nZDyPU.png\" alt=\"节流\"></p>\n<p>节流的实现目前有两种主流方式：<strong>时间戳</strong> 和 <strong>定时器</strong></p>\n<h3 id=\"节流实现\"><a href=\"#%E8%8A%82%E6%B5%81%E5%AE%9E%E7%8E%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>节流实现</h3>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>show<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ibox<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>click<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//节流</span>\n<span class=\"token keyword\">let</span> show <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#show\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    ibox <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#ibox\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> wait</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//shell函数</span>\n    <span class=\"token keyword\">let</span> lastTime <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> nowTime <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>nowTime <span class=\"token operator\">-</span> lastTime <span class=\"token operator\">></span> wait<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            fn<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            lastTime <span class=\"token operator\">=</span> nowTime<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">buy</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    show<span class=\"token punctuation\">.</span><span class=\"token property-access\">innerText</span> <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>show<span class=\"token punctuation\">.</span><span class=\"token property-access\">innerText</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nibox<span class=\"token punctuation\">.</span><span class=\"token property-access\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span>buy<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><img src=\"https://s2.ax1x.com/2019/09/04/nZyPDs.gif\" alt=\"节流\"></p>\n<h2 id=\"相关文章\"><a href=\"#%E7%9B%B8%E5%85%B3%E6%96%87%E7%AB%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>相关文章</h2>\n<ol>\n<li><a href=\"https://juejin.im/post/5b8de829f265da43623c4261\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">7 分钟理解 JS 的节流、防抖及使用场景</a></li>\n<li><a href=\"https://juejin.im/post/5931561fa22b9d0058c5b87d\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JavaScript 专题之跟着 underscore 学防抖</a></li>\n</ol>\n<hr>\n"}},{"node":{"title":"['1', '2', '3'].map(parseInt) what & why ?","path":"/post/fe8c3bb7091081b7ef7cdd94707ab307/","date":"2019/07/13","timeToRead":1,"content":"<blockquote>\n<p>转自 <a href=\"https://github.com/sisterAn/blog/issues/19\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/sisterAn/blog/issues/19</a> 侵删</p>\n</blockquote>\n<h3 id=\"一道题目引发的问题\"><a href=\"#%E4%B8%80%E9%81%93%E9%A2%98%E7%9B%AE%E5%BC%95%E5%8F%91%E7%9A%84%E9%97%AE%E9%A2%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>一道题目引发的问题</h3>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span><span class=\"token string\">\"10\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"10\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"10\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"10\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"10\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span>parseInt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [10, NaN, 2, 3, 4]</span></code></pre>\n<h3 id=\"parseint\"><a href=\"#parseint\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>parseInt</h3>\n<p><code class=\"language-text\">parseInt()</code>  函数解析一个字符串参数，并返回一个指定基数的整数 (数学系统的基础)。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> intValue <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> radix<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><code class=\"language-text\">string</code>  要被解析的值。如果参数不是一个字符串，则将其转换为字符串(使用 ToString 抽象操作)。字符串开头的空白符将会被忽略。</p>\n<p><code class=\"language-text\">radix</code>  一个介于 2 和 36 之间的整数(数学系统的基础)，表示上述字符串的基数。默认为 10。\n<code class=\"language-text\">返回值</code>  返回一个整数或 NaN</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 100</span>\n<span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 100</span>\n<span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4 -> converts 100 in base 2 to base 10</span></code></pre>\n<p><strong>注意：</strong>\n在<code class=\"language-text\">radix</code>为 undefined，或者<code class=\"language-text\">radix</code>为 0 或者没有指定的情况下，JavaScript 作如下处理：</p>\n<ul>\n<li>如果字符串 string 以\"0x\"或者\"0X\"开头, 则基数是 16 (16 进制).</li>\n<li>如果字符串 string 以\"0\"开头, 基数是 8（八进制）或者 10（十进制），那么具体是哪个基数由实现环境决定。ECMAScript 5 规定使用 10，但是并不是所有的浏览器都遵循这个规定。因此，永远都要明确给出 radix 参数的值。</li>\n<li>如果字符串 string 以其它任何值开头，则基数是 10 (十进制)。</li>\n</ul>\n<p>更多详见<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">parseInt | MDN</a></p>\n<h3 id=\"map\"><a href=\"#map\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>map</h3>\n<p><code class=\"language-text\">map()</code>  方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> new_array <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">currentValue<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">// Return element for new_array</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> thisArg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n<p>可以看到<code class=\"language-text\">callback</code>回调函数需要三个参数, 我们通常只使用第一个参数 (其他两个参数是可选的)。\n<code class=\"language-text\">currentValue</code>  是 callback 数组中正在处理的当前元素。\n<code class=\"language-text\">index</code>可选, 是 callback 数组中正在处理的当前元素的索引。\n<code class=\"language-text\">array</code>可选, 是 callback map 方法被调用的数组。\n另外还有<code class=\"language-text\">thisArg</code>可选, 执行 callback 函数时使用的 this 值。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span> <span class=\"token arrow operator\">=></span> num <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [2, 3, 4]</span></code></pre>\n<p>更多详见<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Array.prototype.map() | MDN</a></p>\n<h3 id=\"回到真实的事例上\"><a href=\"#%E5%9B%9E%E5%88%B0%E7%9C%9F%E5%AE%9E%E7%9A%84%E4%BA%8B%E4%BE%8B%E4%B8%8A\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>回到真实的事例上</h3>\n<p>回到我们真实的事例上</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span>parseInt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>对于每个迭代<code class=\"language-text\">map</code>, <code class=\"language-text\">parseInt()</code>传递两个参数: <strong>字符串和基数</strong>。\n所以实际执行的的代码是：</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>即返回的值分别为：</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n<span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN</span>\n<span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN, 3 不是二进制</span></code></pre>\n<p>所以：</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span>parseInt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 1, NaN, NaN</span></code></pre>\n<p>由此，加里·伯恩哈德例子也就很好解释了，这里不再赘述</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span><span class=\"token string\">\"10\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"10\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"10\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"10\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"10\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span>parseInt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [10, NaN, 2, 3, 4]</span></code></pre>\n<h3 id=\"如何在现实世界中做到这一点\"><a href=\"#%E5%A6%82%E4%BD%95%E5%9C%A8%E7%8E%B0%E5%AE%9E%E4%B8%96%E7%95%8C%E4%B8%AD%E5%81%9A%E5%88%B0%E8%BF%99%E4%B8%80%E7%82%B9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>如何在现实世界中做到这一点</h3>\n<p>如果您实际上想要循环访问字符串数组, 该怎么办？ <code class=\"language-text\">map()</code>然后把它换成数字？使用编号!</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span><span class=\"token string\">\"10\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"10\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"10\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"10\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"10\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [10, 10, 10, 10, 10]</span></code></pre>\n<hr>\n"}}]}}},"context":{}}